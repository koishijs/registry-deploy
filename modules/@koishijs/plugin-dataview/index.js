import{Buffer as p}from"https://registry.koishi.chat/modules/buffer/index.js";import m from"https://registry.koishi.chat/modules/process/index.js";import{clone as u,makeArray as h,Schema as _}from"https://registry.koishi.chat/modules/koishi/index.js";import{DataService as y}from"https://registry.koishi.chat/modules/@koishijs/plugin-console/index.js";import"https://registry.koishi.chat/modules/path-browserify/index.js";var o=Object.defineProperty,b=(t,r,e)=>r in t?o(t,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[r]=e,n=(t,r)=>o(t,"name",{value:r,configurable:!0}),d=(t,r,e)=>(b(t,typeof r!="symbol"?r+"":r,e),e);function c(t){return t instanceof Date?`"d${t.toJSON()}"`:JSON.stringify(t,(r,e)=>{if(typeof e=="string")return"s"+e;if(typeof e=="object"){if(e instanceof Date)return"d"+new Date(e).toJSON();if(e===null)return null;let s=Array.isArray(e)?[]:{};for(let i in e)e[i]instanceof Date?(s[i]=new Date(e[i]),s[i].toJSON=void 0):s[i]=e[i];return s}return e})}n(c,"serialize");function f(t){if(t!==void 0)return JSON.parse(t,(r,e)=>typeof e=="string"?e[0]==="s"?e.slice(1):new Date(e.slice(1)):e)}n(f,"deserialize");var a=class extends y{task;addListener(t,r=!1){this.ctx.console.addListener(`database/${t}`,async(...e)=>{let s=await this.ctx.database[t](...e.map(f));return r&&this.refresh(),s===void 0?s:c(s)},{authority:4})}constructor(t){super(t,"database",{authority:4}),t.console.addEntry(["https://registry.koishi.chat/modules/@koishijs/plugin-dataview/dist/index.js","https://registry.koishi.chat/modules/@koishijs/plugin-dataview/dist/style.css"]),this.addListener("create",!0),this.addListener("eval",!0),this.addListener("get"),this.addListener("remove",!0),this.addListener("set"),this.addListener("stats"),this.addListener("upsert",!0),t.on("model",()=>this.refresh())}async getInfo(){let t=await this.ctx.database.stats(),r={tables:{},...t},e=r.tables;r.tables={};for(let s in this.ctx.model.tables){r.tables[s]={...u(this.ctx.model.tables[s]),...e[s]},r.tables[s].primary=h(r.tables[s].primary);for(let[i,l]of Object.entries(r.tables[s].fields))l.deprecated&&delete r.tables[s].fields[i]}return r.tables=Object.fromEntries(Object.entries(r.tables).sort(([s],[i])=>s.localeCompare(i))),r}get(t=!1){return t&&delete this.task,this.task||=this.getInfo()}};n(a,"DatabaseProvider");d(a,"filter",!1);d(a,"using",["console","database"]);(t=>{t.Config=_.object({})})(a||(a={}));var w=a;export{w as default,f as deserialize,c as serialize};
